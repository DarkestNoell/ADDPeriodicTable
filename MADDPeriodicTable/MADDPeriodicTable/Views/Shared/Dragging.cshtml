
@{
    ViewBag.Title = "Elements";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Dragging</title>
</head>
<body>
    <div> 
    </div>
</body>
</html>*@

<!doctype html>
<html lang="en">

<head>
    <meta name="viewport" content="width=device-width" />
    <title>Dragging</title>


    <script src="http://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.0.6-development-only.js"></script>


    <script type="text/javascript">



//Checking for browser compatibility is accomplished with the Modernizr JavaScript library.
//The latest version of the library is available at www.modernizr.com.

//The code below establishes a way to send debug messages to the browser JavaScript Console,
//but in such a way as to ignore errors when the browser doesn't support the JavaScript Console.
//To log a messages to the console within this code, insert into the code:
//Debugger.log("my message");
window.addEventListener("load", windowLoadHandler, false);
var Debugger = function() { };
Debugger.log = function(message) {
	try {
		console.log(message);
	}
	catch (exception) {
		return;
	}
}

function windowLoadHandler() {
	canvasApp();
}

function canvasSupport() {
	return Modernizr.canvas;
}

function canvasApp() {
    if (!canvasSupport()) {
        return;
    }

    var theCanvas = document.getElementById("canvasOne");
    var theCanvas2 = document.getElementById("canvasTwo");
    var context = theCanvas.getContext("2d");
    var context2 = theCanvas2.getContext("2d");

    init();

    var numShapes;
    var shapes;
    var shapes2;
    var origXs;
    var origYs;
    var dragIndex;
    var dragging;
    var mouseX;
    var mouseY;
    var dragHoldX;
    var dragHoldY;
    var elementWidth;
    var elementPlace;

    function init() {
        elementWidth = canvasOne.width / 18;
        elementPlace = canvasOne.width / 36;
        origXs = [];
        origYs = [];
        shapes = [];
        shapes2 = [];

        origXs.push(0);
        origYs.push(elementWidth*6);
        origXs.push(elementWidth);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 2);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 3);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 4);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 5);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 6);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 7);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 8);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 9);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 10);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 11);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 12);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 13);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 14);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 15);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 16);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 17);
        origYs.push(elementWidth * 6);

        origXs.push(0);
        origYs.push(elementWidth * 5); 
        origXs.push(elementWidth);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 2);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 3);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 4);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 5);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 6);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 7);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 8);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 9);
        origYs.push(elementWidth * 5); 
        origXs.push(elementWidth * 10);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 11);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 12);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 13);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 14);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 15);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 16);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 17);
        origYs.push(elementWidth * 5);

        origXs.push(0);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 2);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 3);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 4);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 5);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 6);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 7);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 8);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 9);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 10);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 11);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 12);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 13);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 14);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 15);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 16);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 17);
        origYs.push(elementWidth * 4);

        origXs.push(0);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 2);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 3);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 4);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 5);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 6);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 7);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 8);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 9);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 10);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 11);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 12);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 13);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 14);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 15);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 16);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 17);
        origYs.push(elementWidth * 3);

        origXs.push(0);
        origYs.push(elementWidth * 2);
        origXs.push(elementWidth);
        origYs.push(elementWidth * 2);
        origXs.push(elementWidth * 12);
        origYs.push(elementWidth * 2);
        origXs.push(elementWidth * 13);
        origYs.push(elementWidth * 2);
        origXs.push(elementWidth * 14);
        origYs.push(elementWidth * 2);
        origXs.push(elementWidth * 15);
        origYs.push(elementWidth * 2);
        origXs.push(elementWidth * 16);
        origYs.push(elementWidth * 2);
        origXs.push(elementWidth * 17);
        origYs.push(elementWidth * 2);

        origXs.push(0);
        origYs.push(elementWidth);
        origXs.push(elementWidth);
        origYs.push(elementWidth);
        origXs.push(elementWidth * 12);
        origYs.push(elementWidth);
        origXs.push(elementWidth * 13);
        origYs.push(elementWidth);
        origXs.push(elementWidth * 14);
        origYs.push(elementWidth);
        origXs.push(elementWidth * 15);
        origYs.push(elementWidth);
        origXs.push(elementWidth * 16);
        origYs.push(elementWidth);
        origXs.push(elementWidth * 17);
        origYs.push(elementWidth);

        origXs.push(0);
        origYs.push(0);
        origXs.push(elementWidth * 17);
        origYs.push(0);

        makeShapes();
        drawScreen();
        theCanvas.addEventListener("mousedown", mouseDownListener, false);
      
    }

    function makeShapes() {
        var i;
        var tempX;
        var tempY;
        var tempRad;
        var tempR;
        var tempG;
        var tempB;
        var tempColor;
        for (i = 0; i < origXs.length; i++) {
            tempRad = 10 + Math.floor(Math.random() * 25);
            // tempX = Math.random() * (theCanvas.width - tempRad);
            tempX = origXs[i];
            //tempY = Math.random() * (theCanvas.height - tempRad);
            tempY = origYs[i];
            tempR = Math.floor(Math.random() * 255);
            tempG = Math.floor(Math.random() * 255);
            tempB = Math.floor(Math.random() * 255);
            tempColor = "rgb(" + tempR + "," + tempG + "," + tempB + ")";
            tempShape = { x: tempX, y: tempY, size: elementWidth, color: tempColor};
            shapes.push(tempShape);
        }
    }

    function mouseDownListener(evt) {

        var i;
        //We are going to pay attention to the layering order of the objects so that if a mouse down occurs over more than object,
        //only the topmost one will be dragged.
        var highestIndex = -1;

        //getting mouse position correctly, being mindful of resizing that may have occured in the browser:
        var bRect = theCanvas.getBoundingClientRect();
        mouseX = (evt.clientX - bRect.left) * (theCanvas.width / bRect.width);
        mouseY = (evt.clientY - bRect.top) * (theCanvas.height / bRect.height);
       


        //find which shape was clicked
        for (i = 0; i < shapes.length; i++) {
            if (hitTest(shapes[i], mouseX, mouseY)) {
                dragging = true;
          

       
                if (i > highestIndex) {
                    //We will pay attention to the point on the object where the mouse is "holding" the object:
                    dragHoldX = mouseX - shapes[i].x;
                    dragHoldY = mouseY - shapes[i].y;
                    highestIndex = i;
                    dragIndex = i;
                  
                }
            }
        }

        if (dragging) {
          
               
            window.addEventListener("mousemove", mouseMoveListener, false);
        }

        theCanvas.removeEventListener("mousedown", mouseDownListener, false);
       
        window.addEventListener("mouseup", mouseUpListener, false);

        //code below prevents the mouse down from having an effect on the main browser window:
        if (evt.preventDefault) {
            evt.preventDefault();
        } //standard
        else if (evt.returnValue) {
            evt.returnValue = false;
        } //older IE
        return false;
    }

    function mouseUpListener(evt) {
       
        theCanvas.addEventListener("mousedown", mouseDownListener, false);
        window.removeEventListener("mouseup", mouseUpListener, false);
        if (dragging) {

            dragging = false;
        
            window.removeEventListener("mousemove", mouseMoveListener, false);
           
        }
      
       
    }

    function mouseMoveListener(evt) {
        for (i = 0; i < shapes.length; i++) {
            if (shapes[i].y > theCanvas.height) {
                var tempX = origXs[i];
                var tempY = 350;
                var tempRad = shapes[i].size;
                var tempColor = shapes[i].color;
                var tempShape2 = { x: tempX, y: tempY, size: tempRad, color: tempColor };
                shapes2.push(tempShape2);
               
                shapes[i].x = origXs[i];
                shapes[i].y = 50;
            }

        }
        var posX;
        var posY;
        var shapeRad = shapes[dragIndex].rad;
        var minX = shapeRad;
        var maxX = theCanvas.width - shapeRad;
        var minY = shapeRad;
        var maxY = theCanvas.height * 2 - shapeRad;
        //getting mouse position correctly
        var bRect = theCanvas.getBoundingClientRect();
        mouseX = (evt.clientX - bRect.left) * (theCanvas.width / bRect.width);
        mouseY = (evt.clientY - bRect.top) * (theCanvas.height / bRect.height);

        //clamp x and y positions to prevent object from dragging outside of canvas
        posX = mouseX - dragHoldX;
        //posX = (posX < minX) ? minX : ((posX > maxX) ? maxX : posX);
        posY = mouseY - dragHoldY;
        //	posY = (posY < minY) ? minY : ((posY > maxY) ? maxY : posY);

        shapes[dragIndex].x = posX;
        shapes[dragIndex].y = posY;
        drawScreen();

      
    }

    function hitTest(shape, mx, my) {

        var dx;
        var dy;
        dx = mx - shape.x;
        dy = my - shape.y;

        //a "hit" will be registered if the distance away from the center is less than the radius of the circular object
        return (dx * dx + dy * dy < shape.size * shape.size);
    }

    function drawShapes() {
        var i;
        for (i = 0; i < shapes.length; i++) {
            context.fillStyle = shapes[i].color;
            context.beginPath();
            context.rect(shapes[i].x, shapes[i].y, shapes[i].size, shapes[i].size);
            context.closePath();
            context.fill();
            //context.fillStyle = white;
            context.font = "30px Arial";
            context.strokeText("H", shapes[i].x, shapes[i].y + elementWidth);
        }
    }
    function drawShapesTwo() {
        var i;
        for (i = 0; i < shapes2.length; i++) {
            //context2.fillStyle = shapes2[i].color;
            //context2.beginPath();
            //context2.arc(shapes2[i].x, shapes2[i].y - theCanvas2.height / 2, shapes2[i].rad, 0, 2 * Math.PI, false);
            //context2.closePath();
            //context2.fill();
            context.fillStyle = shapes[i].color;
            context.beginPath();
            context.rect(shapes2[i].x, shapes2[i].y - theCanvas2.height / 2, shapes[i].size, shapes[i].size);
            context.closePath();
            context.fill();
      
        }
    }

    function drawScreen() {
        //bg
        context.fillStyle = "#000000";
        context.fillRect(0, 0, theCanvas.width, theCanvas.height);
        context2.fillStyle = "#000000";
        context2.fillRect(0, 0, theCanvas2.width, theCanvas2.height);

        drawShapes();
        drawShapesTwo();
    }
}

        
        

    </script>

</head>

<body>
    <div style="top: 50px; text-align:center">
        <canvas id="canvasOne" height="300" width="500">
            This text is displayed if your browser does not support HTML5 Canvas.
        </canvas>

    </div>
    <div style="bottom: 50px; text-align:center">
        <canvas id="canvasTwo" height="300" width="500">
            This text is displayed if your browser does not support HTML5 Canvas.
        </canvas>

    </div>


</body>
</html>

<meta charset="UTF-8">

<style type="text/css">
    h4 {
        font-family: sans-serif;
    }

    p {
        font-family: sans-serif;
    }

    a {
        font-family: sans-serif;
        color: #d15423;
        text-decoration: none;
    }
</style>