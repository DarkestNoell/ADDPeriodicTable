
@{
    ViewBag.Title = "MADD Periodic Table";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!doctype html>
<html lang="en">

<head>
    <meta name="viewport" content="width=device-width" />
    <title>Dragging</title>


    <script src="http://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.0.6-development-only.js" ></script>


    <script type="text/javascript" @*onload="InitMyScript('@ViewBag.userdetails')"*@>

window.addEventListener("load", windowLoadHandler, false);
var Debugger = function() { };
Debugger.log = function(message) {
	try {
		console.log(message);
	}
	catch (exception) {
		return;
	}
}

function windowLoadHandler() {
	canvasApp();
}

function canvasSupport() {
	return Modernizr.canvas;
}

function canvasApp() {
    if (!canvasSupport()) {
        return;
    }
    var elementsInTrialCompound;
    var elementTitle;

    var theCanvas = document.getElementById("canvasOne");
    var theCanvas2 = document.getElementById("canvasTwo");
    var context = theCanvas.getContext("2d");
    var context2 = theCanvas2.getContext("2d");
    var theCanvas3 = document.getElementById("canvasThree");
    var context3 = theCanvas3.getContext("2d");
    var theCanvas4 = document.getElementById("canvasFour");
    var context4 = theCanvas4.getContext("2d");

    init();

    var numShapes;
    var numShapes2;
    var shapes;

    var origXs;
    var origYs;
    var positionsX;
    var positionsY;
    var dragIndex;
    var dragging;
    var mouseX;
    var mouseY;
    var dragHoldX;
    var dragHoldY;
    var elementWidth;
    var elementPlace;

    function init() {
        elementsInTrialCompound = [];
        numShapes2 = 0;
        elementWidth = canvasOne.width / 18;
        elementPlace = canvasOne.width / 36;
        origXs = [];
        origYs = [];
        positionsX = [];
        positionsY = [];

        positionsX.push(50);
        positionsY.push(250);
        positionsX.push(100);
        positionsY.push(300);
        positionsX.push(150);
        positionsY.push(350);
        positionsX.push(200);
        positionsY.push(350);
        positionsX.push(250);
        positionsY.push(300);
        positionsX.push(300);
        positionsY.push(250);
        shapes = [];
        shapes2 = [];

        origXs.push(0);
        origYs.push(0);
        origXs.push(elementWidth * 17);
        origYs.push(0);

        origXs.push(0);
        origYs.push(elementWidth);
        origXs.push(elementWidth);
        origYs.push(elementWidth);
        origXs.push(elementWidth * 12);
        origYs.push(elementWidth);
        origXs.push(elementWidth * 13);
        origYs.push(elementWidth);
        origXs.push(elementWidth * 14);
        origYs.push(elementWidth);
        origXs.push(elementWidth * 15);
        origYs.push(elementWidth);
        origXs.push(elementWidth * 16);
        origYs.push(elementWidth);
        origXs.push(elementWidth * 17);
        origYs.push(elementWidth);

        origXs.push(0);
        origYs.push(elementWidth * 2);
        origXs.push(elementWidth);
        origYs.push(elementWidth * 2);
        origXs.push(elementWidth * 12);
        origYs.push(elementWidth * 2);
        origXs.push(elementWidth * 13);
        origYs.push(elementWidth * 2);
        origXs.push(elementWidth * 14);
        origYs.push(elementWidth * 2);
        origXs.push(elementWidth * 15);
        origYs.push(elementWidth * 2);
        origXs.push(elementWidth * 16);
        origYs.push(elementWidth * 2);
        origXs.push(elementWidth * 17);
        origYs.push(elementWidth * 2);

        origXs.push(0);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 2);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 3);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 4);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 5);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 6);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 7);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 8);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 9);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 10);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 11);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 12);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 13);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 14);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 15);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 16);
        origYs.push(elementWidth * 3);
        origXs.push(elementWidth * 17);
        origYs.push(elementWidth * 3);

        origXs.push(0);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 2);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 3);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 4);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 5);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 6);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 7);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 8);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 9);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 10);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 11);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 12);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 13);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 14);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 15);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 16);
        origYs.push(elementWidth * 4);
        origXs.push(elementWidth * 17);
        origYs.push(elementWidth * 4);

        origXs.push(0);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth);
        origYs.push(elementWidth * 5);

        origXs.push(elementWidth * 2);
        origYs.push(elementWidth * 5);


        origXs.push(elementWidth * 3);
        origYs.push(elementWidth * 7);
        origXs.push(elementWidth * 4);
        origYs.push(elementWidth * 7);
        origXs.push(elementWidth * 5);
        origYs.push(elementWidth * 7);
        origXs.push(elementWidth * 6);
        origYs.push(elementWidth * 7);
        origXs.push(elementWidth * 7);
        origYs.push(elementWidth * 7);
        origXs.push(elementWidth * 8);
        origYs.push(elementWidth * 7);
        origXs.push(elementWidth * 9);
        origYs.push(elementWidth * 7);
        origXs.push(elementWidth * 10);
        origYs.push(elementWidth * 7);
        origXs.push(elementWidth * 11);
        origYs.push(elementWidth * 7);
        origXs.push(elementWidth * 12);
        origYs.push(elementWidth * 7);
        origXs.push(elementWidth * 13);
        origYs.push(elementWidth * 7);
        origXs.push(elementWidth * 14);
        origYs.push(elementWidth * 7);
        origXs.push(elementWidth * 15);
        origYs.push(elementWidth * 7);
        origXs.push(elementWidth * 16);
        origYs.push(elementWidth * 7);


        origXs.push(elementWidth * 3);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 4);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 5);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 6);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 7);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 8);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 9);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 10);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 11);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 12);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 13);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 14);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 15);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 16);
        origYs.push(elementWidth * 5);
        origXs.push(elementWidth * 17);
        origYs.push(elementWidth * 5);

        origXs.push(0);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 2);
        origYs.push(elementWidth * 6);


        origXs.push(elementWidth * 3);
        origYs.push(elementWidth * 8);
        origXs.push(elementWidth * 4);
        origYs.push(elementWidth * 8);
        origXs.push(elementWidth * 5);
        origYs.push(elementWidth * 8);
        origXs.push(elementWidth * 6);
        origYs.push(elementWidth * 8);
        origXs.push(elementWidth * 7);
        origYs.push(elementWidth * 8);
        origXs.push(elementWidth * 8);
        origYs.push(elementWidth * 8);
        origXs.push(elementWidth * 9);
        origYs.push(elementWidth * 8);
        origXs.push(elementWidth * 10);
        origYs.push(elementWidth * 8);
        origXs.push(elementWidth * 11);
        origYs.push(elementWidth * 8);
        origXs.push(elementWidth * 12);
        origYs.push(elementWidth * 8);
        origXs.push(elementWidth * 13);
        origYs.push(elementWidth * 8);
        origXs.push(elementWidth * 14);
        origYs.push(elementWidth * 8);
        origXs.push(elementWidth * 15);
        origYs.push(elementWidth * 8);
        origXs.push(elementWidth * 16);
        origYs.push(elementWidth * 8);


        origXs.push(elementWidth * 3);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 4);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 5);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 6);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 7);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 8);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 9);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 10);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 11);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 12);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 13);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 14);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 15);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 16);
        origYs.push(elementWidth * 6);
        origXs.push(elementWidth * 17);
        origYs.push(elementWidth * 6);

        makeShapes();
        drawScreen();
        DrawBottomCanvas();
        theCanvas.addEventListener("mousedown", mouseDownListener, false);

    }
    var alkali;
    var alkaline;
    var transition;
    var basic;
    var metalloid;
    var nonmetal;
    var halogen;
    var nobelGas;
    var lanthanide;
    var actinide;
    function makeShapes() {
        alkali = [2, 10, 18, 36, 54, 86];
        alkaline = [3, 11, 19, 37, 55, 87];
        transition = [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 71,
        72, 73, 74, 75, 76, 77, 78, 79, 103, 104, 105, 106, 107, 108, 109, 110, 111];
        basic = [12, 30, 48, 49, 80, 81, 82, 112, 113, 114, 115];
        metalloid = [4, 13, 31, 32, 50, 51, 83];
        nonmetal = [0, 5, 6, 7, 14, 15, 33];
        halogen = [8, 16, 34, 52, 84, 116];
        nobelGas = [1, 9, 17, 35, 53, 85, 117];
        lanthanide = [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70];
        actinide = [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102];
        var i;
        var tempX;
        var tempY;
        var tempRad;
        var tempR;
        var tempG;
        var tempB;
        var tempColor;
        for (i = 0; i < origXs.length; i++) {
            tempX = origXs[i];
            tempY = origYs[i];

            if (i == basic[0] ||
                i == basic[1] ||
                i == basic[2] ||
                i == basic[3] ||
                i == basic[4] ||
                i == basic[5] ||
                i == basic[6] ||
                i == basic[7] ||
                i == basic[8] ||
                i == basic[9] ||
                i == basic[10]
                ) {
                tempColor = "rgb(" + 255 + "," + 255 + "," + 0 + ")";
            } else if (i == alkali[0] ||
                 i == alkali[1] ||
                 i == alkali[2] ||
                 i == alkali[3] ||
                 i == alkali[4] ||
                 i == alkali[5]
                 ) {
                tempColor = "rgb(" + 255 + "," + 0 + "," + 0 + ")";
            } else if (i == alkaline[0] ||
                 i == alkaline[1] ||
                 i == alkaline[2] ||
                 i == alkaline[3] ||
                 i == alkaline[4] ||
                 i == alkaline[5]
                 ) {
                tempColor = "rgb(" + 255 + "," + 125 + "," + 0 + ")";
            } else if (i == metalloid[0] ||
                 i == metalloid[1] ||
                 i == metalloid[2] ||
                 i == metalloid[3] ||
                 i == metalloid[4] ||
                 i == metalloid[5] ||
                 i == metalloid[6]
                 ) {
                tempColor = "rgb(" + 125 + "," + 255 + "," + 0 + ")";
            } else if (i == nonmetal[0] ||
                 i == nonmetal[1] ||
                 i == nonmetal[2] ||
                 i == nonmetal[3] ||
                 i == nonmetal[4] ||
                 i == nonmetal[5] ||
                 i == nonmetal[6]
                 ) {
                tempColor = "rgb(" + 0 + "," + 255 + "," + 0 + ")";
            } else if (i == halogen[0] ||
                 i == halogen[1] ||
                 i == halogen[2] ||
                 i == halogen[3] ||
                 i == halogen[4] ||
                 i == halogen[5]
                 ) {
                tempColor = "rgb(" + 0 + "," + 255 + "," + 125 + ")";
            } else if (i == nobelGas[0] ||
                 i == nobelGas[1] ||
                 i == nobelGas[2] ||
                 i == nobelGas[3] ||
                 i == nobelGas[4] ||
                 i == nobelGas[5] ||
                 i == nobelGas[6]
                 ) {
                tempColor = "rgb(" + 0 + "," + 255 + "," + 255 + ")";
            } else if (i == lanthanide[0] ||
                 i == lanthanide[1] ||
                 i == lanthanide[2] ||
                 i == lanthanide[3] ||
                 i == lanthanide[4] ||
                 i == lanthanide[5] ||
                 i == lanthanide[6] ||
                 i == lanthanide[7] ||
                 i == lanthanide[8] ||
                 i == lanthanide[9] ||
                 i == lanthanide[10] ||
                i == lanthanide[11] ||
                i == lanthanide[12] ||
                i == lanthanide[13] ||
                i == lanthanide[14]
                 ) {
                tempColor = "rgb(" + 0 + "," + 125 + "," + 255 + ")";
            } else if (i == actinide[0] ||
                 i == actinide[1] ||
                 i == actinide[2] ||
                 i == actinide[3] ||
                 i == actinide[4] ||
                 i == actinide[5] ||
                 i == actinide[6] ||
                 i == actinide[7] ||
                 i == actinide[8] ||
                 i == actinide[9] ||
                 i == actinide[10] ||
                 i == actinide[11] ||
                 i == actinide[12] ||
                 i == actinide[13] ||
                 i == actinide[14]
                 ) {
                tempColor = "rgb(" + 125 + "," + 0 + "," + 255 + ")";
            } else if (i == transition[0] ||
                 i == transition[1] ||
                 i == transition[2] ||
                 i == transition[3] ||
                 i == transition[4] ||
                 i == transition[5] ||
                 i == transition[6] ||
                 i == transition[7] ||
                 i == transition[8] ||
                 i == transition[9] ||
                 i == transition[10] ||
                 i == transition[11] ||
                 i == transition[12] ||
                 i == transition[13] ||
                 i == transition[14] ||
                 i == transition[15] ||
                 i == transition[16] ||
                 i == transition[17] ||
                 i == transition[18] ||
                 i == transition[19] ||
                 i == transition[20] ||
                 i == transition[11] ||
                 i == transition[12] ||
                 i == transition[13] ||
                 i == transition[14] ||
                 i == transition[15] ||
                 i == transition[16] ||
                 i == transition[17] ||
                 i == transition[18] ||
                 i == transition[19] ||
                 i == transition[20] ||
                 i == transition[21] ||
                 i == transition[22] ||
                 i == transition[23] ||
                 i == transition[24] ||
                 i == transition[25] ||
                 i == transition[26] ||
                 i == transition[27] ||
                 i == transition[28] ||
                 i == transition[29] ||
                 i == transition[30] ||
                 i == transition[31] ||
                 i == transition[32] ||
                 i == transition[33] ||
                 i == transition[34] ||
                 i == transition[35] ||
                 i == transition[36] ||
                 i == transition[37]
                 ) {
                tempColor = "rgb(" + 0 + "," + 0 + "," + 255 + ")";
            } else {
                tempColor = "rgb(" + 100 + "," + 0 + "," + 0 + ")";
            }
            tempShape = { x: tempX, y: tempY, size: elementWidth, color: tempColor };
            shapes.push(tempShape);
        }
    }
    function containing(arr, num) {
        for (j = 0; j < arr.length; i++){
            if (arr[j] == num) {
                return true;
            }
        }
        return false;
    }
    function mouseDownListener(evt) {

        var i;
        var highestIndex = -1;
        var bRect = theCanvas.getBoundingClientRect();
        mouseX = (evt.clientX - bRect.left) * (theCanvas.width / bRect.width);
        mouseY = (evt.clientY - bRect.top) * (theCanvas.height / bRect.height);



        //find which shape was clicked
        for (i = 0; i < shapes.length; i++) {
            if (hitTest(shapes[i], mouseX, mouseY)) {
                dragging = true;



                if (i > highestIndex) {
                    //We will pay attention to the point on the object where the mouse is "holding" the object:
                    dragHoldX = mouseX - shapes[i].x;
                    dragHoldY = mouseY - shapes[i].y;
                    highestIndex = i;
                    dragIndex = i;

                }
            }
        }

        if (dragging) {


            window.addEventListener("mousemove", mouseMoveListener, false);
        }

        theCanvas.removeEventListener("mousedown", mouseDownListener, false);

        window.addEventListener("mouseup", mouseUpListener, false);

        //code below prevents the mouse down from having an effect on the main browser window:
        if (evt.preventDefault) {
            evt.preventDefault();
        } //standard
        else if (evt.returnValue) {
            evt.returnValue = false;
        } //older IE
        return false;
    }

    function mouseUpListener(evt) {

        theCanvas.addEventListener("mousedown", mouseDownListener, false);
        window.removeEventListener("mouseup", mouseUpListener, false);

        if (dragging) {


            for (i = 0; i < shapes.length; i++) {
                shapes[i].x = origXs[i];
                shapes[i].y = origYs[i];

            }
            var bRect = theCanvas3.getBoundingClientRect();
            mouseX = (evt.clientX - bRect.left) * (theCanvas3.width / bRect.width);
            mouseY = (evt.clientY - bRect.top) * (theCanvas3.height / bRect.height);
            
            window.removeEventListener("mousemove", mouseMoveListener, false);
           
           
            dragging = false;
            if (mouseY < theCanvas.height / 12) {
                
                drawScreen();
               
            }
            else {
                shapes2[shapes2.length - 1].x = mouseX;
                shapes2[shapes2.length - 1].y = mouseY;
                drawScreen();
                elementsInTrialCompound.push(elementTitle[shapes2[shapes2.length - 1].elementID]);
                for (i = 0; i < elementsInTrialCompound.length; i++) {
                    context.strokeText(elementsInTrialCompound[i], i * 30, 395);
                }
                DrawBottomCanvas();
               
               
            }       
        }
    }

    function mouseMoveListener(evt) {
    
        for (i = 0; i < shapes.length; i++) {
            if (shapes[i].y > theCanvas.height ) {
               var tempX = shapes[i].x;
               var tempY = shapes[i].y;
                var tempRad = shapes[i].size;
                var tempColor = shapes[i].color;
                var tempShape2 = { x: tempX, y: tempY, size: tempRad, color: tempColor, elementID: i};
                shapes2.push(tempShape2);

            }

        }
        var posX;
        var posY;
        var shapeRad = shapes[dragIndex].rad;
        var minX = shapeRad;
        var maxX = theCanvas.width - shapeRad;
        var minY = shapeRad;
        var maxY = theCanvas.height * 2 - shapeRad;
        //getting mouse position correctly
        var bRect = theCanvas.getBoundingClientRect();
        mouseX = (evt.clientX - bRect.left) * (theCanvas.width / bRect.width);
        mouseY = (evt.clientY - bRect.top) * (theCanvas.height / bRect.height);

        //clamp x and y positions to prevent object from dragging outside of canvas
        posX = mouseX - dragHoldX;
        //posX = (posX < minX) ? minX : ((posX > maxX) ? maxX : posX);
        posY = mouseY - dragHoldY;
        //	posY = (posY < minY) ? minY : ((posY > maxY) ? maxY : posY);

        shapes[dragIndex].x = posX;
        shapes[dragIndex].y = posY;
        drawScreen();


    }

    function hitTest(shape, mx, my) {

        var dx;
        var dy;
        dx = mx - shape.x - shape.size;
        dy = my - shape.y - shape.size / 2;
        return (dx * dx + dy * dy < shape.size * shape.size);
        //return (mx  > shape.x);
    }
    function createElementList() {
        elementTitle = [];
        elementTitle.push("H");
        elementTitle.push("He");
        elementTitle.push("Li");
        elementTitle.push("Be");
        elementTitle.push("B");
        elementTitle.push("C");
        elementTitle.push("N");
        elementTitle.push("O");
        elementTitle.push("F");
        elementTitle.push("Ne");
        elementTitle.push("Na");
        elementTitle.push("Mg");
        elementTitle.push("Al");
        elementTitle.push("Si");
        elementTitle.push("P");
        elementTitle.push("S");
        elementTitle.push("Cl");
        elementTitle.push("Ar");
        elementTitle.push("K");
        elementTitle.push("Ca");
        elementTitle.push("Sc");
        elementTitle.push("Ti");
        elementTitle.push("V");
        elementTitle.push("Cr");
        elementTitle.push("Mn");
        elementTitle.push("Fe");
        elementTitle.push("Co");
        elementTitle.push("Ni");
        elementTitle.push("Cu");
        elementTitle.push("Zn");
        elementTitle.push("Ga");
        elementTitle.push("Ge");
        elementTitle.push("As");
        elementTitle.push("Se");
        elementTitle.push("Br");
        elementTitle.push("Kr");
        elementTitle.push("Rb");
        elementTitle.push("Sr");
        elementTitle.push("Y");
        elementTitle.push("Zr");
        elementTitle.push("Nb");
        elementTitle.push("Mo");
        elementTitle.push("Tc");
        elementTitle.push("Ru");
        elementTitle.push("Rh");
        elementTitle.push("Pd");
        elementTitle.push("Ag");
        elementTitle.push("Cd");
        elementTitle.push("In");
        elementTitle.push("Sn");
        elementTitle.push("Sb");
        elementTitle.push("Te");
        elementTitle.push("In");
        elementTitle.push("Xe");
        elementTitle.push("Cs");
        elementTitle.push("Ba");
        elementTitle.push("La");
        elementTitle.push("Ce");
        elementTitle.push("Pr");
        elementTitle.push("Nd");
        elementTitle.push("Pm");
        elementTitle.push("Sm");
        elementTitle.push("Eu");
        elementTitle.push("Gd");
        elementTitle.push("Tb");
        elementTitle.push("Dy");
        elementTitle.push("Ho");
        elementTitle.push("Er");
        elementTitle.push("Tm");
        elementTitle.push("Yb");
        elementTitle.push("Lu");
        elementTitle.push("Hf");
        elementTitle.push("Ta");
        elementTitle.push("W");
        elementTitle.push("Re");
        elementTitle.push("Os");
        elementTitle.push("Ir");
        elementTitle.push("Pt");
        elementTitle.push("Au");
        elementTitle.push("Hg");
        elementTitle.push("Ti");
        elementTitle.push("Pb");
        elementTitle.push("Bi");
        elementTitle.push("Po");
        elementTitle.push("At");
        elementTitle.push("Rn");
        elementTitle.push("Fr");
        elementTitle.push("Ra");
        elementTitle.push("Ac");
        elementTitle.push("Th");
        elementTitle.push("Pa");
        elementTitle.push("U");
        elementTitle.push("Np");
        elementTitle.push("Pu");
        elementTitle.push("Am");
        elementTitle.push("Cm");
        elementTitle.push("Bk");
        elementTitle.push("Cf");
        elementTitle.push("Es");
        elementTitle.push("Fm");
        elementTitle.push("Md");
        elementTitle.push("No");
        elementTitle.push("Lr");
        elementTitle.push("Rf");
        elementTitle.push("Db");
        elementTitle.push("Sg");
        elementTitle.push("Bh");
        elementTitle.push("Hs");
        elementTitle.push("Mt");
        elementTitle.push("Ds");
        elementTitle.push("Rg");
        elementTitle.push("Cn");
        elementTitle.push("Nh");
        elementTitle.push("Fl");
        elementTitle.push("Mc");
        elementTitle.push("Lv");
        elementTitle.push("Ts");
        elementTitle.push("Og");
    }
    function drawShapes() {
        createElementList();
        var i;
        for (i = 0; i < shapes.length; i++) {
            context.fillStyle = shapes[i].color;
            context.beginPath();
            context.rect(shapes[i].x, shapes[i].y, shapes[i].size, shapes[i].size);
            context.closePath();
            context.fill();
            context.stroke();
            context.font = "18px Arial";
            context.strokeText(elementTitle[i], shapes[i].x +5, shapes[i].y + elementWidth/2);
        }
    }
    function drawShapesTwo() {
        var i;
        for (i = 0; i < shapes2.length; i++) {
            context3.fillStyle = shapes2[i].color;
            context3.beginPath();
            context3.rect(shapes2[i].x, shapes2[i].y, shapes2[i].size, shapes2[i].size);
            context3.closePath();
            context3.fill();
            context3.font = "18px Arial";
            context3.strokeText(elementTitle[shapes2[i].elementID], shapes2[i].x + 5, shapes2[i].y + elementWidth / 2);
            //elementsInTrialCompound.push(elementTitle[shapes2[i].elementID]+1);
        }
    }

    function drawScreen() {
        //bg
        context.fillStyle = "#ffffff";
        context.fillRect(0, 0, theCanvas.width, theCanvas.height);
        context2.fillStyle = "#000000";
        context2.fillRect(0, 0, theCanvas2.width, theCanvas2.height);
        context.stroke();
       
        context4.fillStyle = "#000000";
        context4.fillRect(0, 0, theCanvas2.width, theCanvas2.height);

        drawShapes();
        
    }
    function DrawBottomCanvas() {
        context3.fillStyle = "#000000";
        context3.fillRect(0, 0, theCanvas2.width, theCanvas2.height);
        drawShapesTwo();
    }
}




    </script>

</head>

<body>
    <div style="top: 50px; bottom: 50px; text-align:center">
        <canvas id="canvasOne" height="400" width="750">
            This text is displayed if your browser does not support HTML5 Canvas.
        </canvas>

    </div>

    <div style="bottom: 50px; text-align:center">
        <canvas id="canvasTwo" height="250" width="350">
            This text is displayed if your browser does not support HTML5 Canvas.
        </canvas>

        @*</div>*@
        @*<div style="bottom: 50px; text-align:left">*@
        <canvas id="canvasThree" height="250" width="350">
            This text is displayed if your browser does not support HTML5 Canvas.
        </canvas>
        @*</div>*@
        @*<div style="bottom: 50px; text-align:right">*@
        <canvas id="canvasFour" height="250" width="350">
            This text is displayed if your browser does not support HTML5 Canvas.
        </canvas>
    </div>
    @*<div>
        <table id="t01">
            <thead>
            <th>ID</th>
            <th>Element Name</th>
            <th>Element Abbreviation</th>
            </thead>
            @foreach (var item in ViewBag.userdetails)
            {
                <tr>
                    <td>
                        @item.ID
                    </td>
                    <td>
                        @item.Element_Name
                    </td>
                    <td>
                        @item.Element_Abbreviation
                    </td>
                </tr>
            }
        </table>
    </div>*@

</body>
</html>

<meta charset="UTF-8">

<style type="text/css">
    h4 {
        font-family: sans-serif;
    }

    p {
        font-family: sans-serif;
    }

    a {
        font-family: sans-serif;
        color: #d15423;
        text-decoration: none;
    }
</style>